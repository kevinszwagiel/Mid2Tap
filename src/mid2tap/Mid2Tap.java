package mid2tap;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * The main GUI that drives the program.
 * 
 * @author Kevin
 * 
 */
public class Mid2Tap extends javax.swing.JFrame {

    /**
     * Creates new form MainGUI
     */
    public Mid2Tap() {     
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eofLabel = new javax.swing.JLabel();
        eofPath = new javax.swing.JTextField();
        eofBrowse = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        artistInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        songInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        themeInput = new javax.swing.JTextField();
        convertButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        audioPath = new javax.swing.JTextField();
        audioBrowse = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        artworkPath = new javax.swing.JTextField();
        artworkBrowse = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        outputPath = new javax.swing.JTextField();
        outputBrowse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MIDI -> TTR2");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        eofLabel.setText("MIDI");

        eofBrowse.setText("Browse...");
        eofBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eofBrowseMouseClicked(evt);
            }
        });

        jLabel1.setText("Artist");

        jLabel2.setText("Song");

        jLabel3.setText("Theme");

        themeInput.setText("TTRDJ");

        convertButton.setText("Convert");
        convertButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                convertButtonMouseClicked(evt);
            }
        });

        jLabel4.setText("Audio");

        audioBrowse.setText("Browse...");
        audioBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                audioBrowseMouseClicked(evt);
            }
        });

        jLabel5.setText("Artwork");

        artworkBrowse.setText("Browse...");
        artworkBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                artworkBrowseMouseClicked(evt);
            }
        });

        jLabel6.setText("Output Folder");

        outputBrowse.setText("Browse...");
        outputBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outputBrowseMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(artistInput, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(songInput, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(themeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 267, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eofLabel)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(eofPath, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(audioPath, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(artworkPath, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eofBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(audioBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(artworkBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(outputPath)
                        .addGap(18, 18, 18)
                        .addComponent(outputBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(convertButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(artistInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(songInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(themeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eofPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eofLabel)
                    .addComponent(eofBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(audioPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(audioBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(artworkPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(artworkBrowse))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(outputPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(convertButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * 
     * Gets the MIDI file that the user selected.
     * 
     * @param evt The mouse event that was detected.
     * @exception IOException Caught if the path cannot be determined.
     *
     */
    private void eofBrowseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eofBrowseMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(previousFolder);
        // Set filter to only allow MIDI extensions
        FileFilter midiFilter = new FileNameExtensionFilter("MIDI", "mid", "midi");
        fileChooser.setFileFilter(midiFilter);
        int fileVal = fileChooser.showOpenDialog(Mid2Tap.this);
        
        if(fileVal == JFileChooser.APPROVE_OPTION) {
            eofFile = fileChooser.getSelectedFile();
                        
            try {
                previousFolder = new File(eofFile.getCanonicalPath());
                eofPath.setText(eofFile.getCanonicalPath());
            } catch (IOException ex) {
                eofPath.setText("Unable to set path!");
            }
        }
    }//GEN-LAST:event_eofBrowseMouseClicked

    /**
     * 
     * Gets the audio file that the user selected.
     * 
     * @param evt The mouse event that was detected.
     * @exception IOException Caught if path cannot be determined.
     * 
     */
    private void audioBrowseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_audioBrowseMouseClicked
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(previousFolder);
        // Set filter to only allow MP3 or M4A extensions
        FileFilter audioFilter = new FileNameExtensionFilter("Supported Audio", "mp3", "m4a");
        fileChooser.setFileFilter(audioFilter);
        int fileVal = fileChooser.showOpenDialog(Mid2Tap.this);
        
        if(fileVal == JFileChooser.APPROVE_OPTION) {
            audioFile = fileChooser.getSelectedFile();
            try {
                previousFolder = new File(audioFile.getCanonicalPath());
                audioPath.setText(audioFile.getCanonicalPath());
            } catch (IOException ex) {
                audioPath.setText("Unable to set path!");
            }
        }
    }//GEN-LAST:event_audioBrowseMouseClicked

    /**
     * 
     * Gets the artwork file that the user selected.
     * 
     * @param evt The mouse event that was detected.
     * @exception IOException Caught if path cannot be determined.
     * 
     */
    private void artworkBrowseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_artworkBrowseMouseClicked
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(previousFolder);
        //Set the filter to only allow PNG extensions
        FileFilter imageFilter = new FileNameExtensionFilter("PNG", "png");
        fileChooser.setFileFilter(imageFilter);
        int fileVal = fileChooser.showOpenDialog(Mid2Tap.this);
        
        if(fileVal == JFileChooser.APPROVE_OPTION) {
            artworkFile = fileChooser.getSelectedFile();
            try {
                previousFolder = new File(artworkFile.getCanonicalPath());
                artworkPath.setText(artworkFile.getCanonicalPath());
            } catch (IOException ex) {
                artworkPath.setText("Unable to set path!");
            }
        }
    }//GEN-LAST:event_artworkBrowseMouseClicked

     /**
     * 
     * Starts the loading window, validates that all input is correct, and 
     * begins the conversion process
     * 
     * @param evt The mouse event that was detected.
     * @exception IOException Caught if path cannot be determined.
     * 
     */
    private void convertButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_convertButtonMouseClicked
        Loading.showConverting();
        boolean error = false;
        boolean cont = true;
        
        // Artist input validation
        if(artistInput.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(Mid2Tap.this, "The artist cannot be empty!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
        
        // Song input validation
        if(songInput.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(Mid2Tap.this, "The song cannot be empty!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
        
        // Theme input validation
        if(themeInput.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(Mid2Tap.this, "The theme cannot be empty!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
        
        // Output folder validation
        if(outputPath.getText().compareTo("") == 0) {            
            JOptionPane.showMessageDialog(Mid2Tap.this, "No output folder specified!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
        
        // Audio input validation
        if(audioPath.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(Mid2Tap.this, "No audio file specified!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
        
        // If there is no error, create a new "artist - song.track" folder
        // and begin the conversion process
        if(!error) {
            String folderName = "\\" + artistInput.getText() + " - " + 
                    songInput.getText() + ".track";
            try {
                trackFolder = new File(outputFolder.getCanonicalPath() + folderName);
                if(trackFolder.exists()) {
                    int val = JOptionPane.showConfirmDialog(Mid2Tap.this, "Folder already exists."
                            + " Overwrite?", "Confirm overwrite", JOptionPane.YES_NO_OPTION);
                    if(val == JOptionPane.YES_OPTION) {
                        cont = true;
                    }
                    
                    else {
                        cont = false;
                    }
                }
                
                else if(trackFolder.mkdir()) {
                    cont = true;
                }
                
                else
                    throw new IOException();
                
                if(cont) {
                    // Generate plist and return the audioDuration
                    audioDuration = Generator.generatePlist(artistInput.getText(), songInput.getText(),
                            themeInput.getText(), trackFolder, audioFile);

                    Generator.generateArtwork(artworkFile, trackFolder);

                    Generator.generateAudio(audioFile, trackFolder);

                    Generator.generateTTR2(audioDuration, eofFile, trackFolder,
                            artistInput.getText(), songInput.getText());

                    JOptionPane.showMessageDialog(Mid2Tap.this, "Conversion Successful!", 
                        "Success!", JOptionPane.INFORMATION_MESSAGE);
                }
                
            } catch(IOException ex) {
                JOptionPane.showMessageDialog(Mid2Tap.this, "Unable to create directory."
                        + " Make sure the program has permission to access the location",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        Loading.closeConverting();
    }//GEN-LAST:event_convertButtonMouseClicked

     /**
     * 
     * Gets the output folder that the user selected.
     * 
     * @param evt The mouse event that was detected.
     * @exception IOException Caught if path cannot be determined.
     * 
     */
    private void outputBrowseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputBrowseMouseClicked
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(previousFolder);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            outputFolder = (fileChooser.getSelectedFile());
            
            try {
                previousFolder = new File(outputFolder.getCanonicalPath());
                outputPath.setText(outputFolder.getCanonicalPath());               
            } catch (IOException ex) {
                outputPath.setText("Unable to set path!");
            }
        }
    }//GEN-LAST:event_outputBrowseMouseClicked

    /**
     * @param args The command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mid2Tap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mid2Tap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mid2Tap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mid2Tap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mid2Tap().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField artistInput;
    private javax.swing.JButton artworkBrowse;
    private javax.swing.JTextField artworkPath;
    private javax.swing.JButton audioBrowse;
    private javax.swing.JTextField audioPath;
    private javax.swing.JButton convertButton;
    private javax.swing.JButton eofBrowse;
    private javax.swing.JLabel eofLabel;
    private javax.swing.JTextField eofPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton outputBrowse;
    private javax.swing.JTextField outputPath;
    private javax.swing.JTextField songInput;
    private javax.swing.JTextField themeInput;
    // End of variables declaration//GEN-END:variables
    File eofFile, audioFile, artworkFile, outputFolder, previousFolder, trackFolder;
    int audioDuration;
}
